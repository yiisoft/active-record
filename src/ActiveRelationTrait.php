<?php

declare(strict_types=1);

namespace Yiisoft\ActiveRecord;

use ReflectionException;
use Throwable;
use Yiisoft\ActiveRecord\Internal\RelationPopulator;
use Yiisoft\Db\Exception\Exception;
use InvalidArgumentException;
use Yiisoft\Db\Exception\InvalidConfigException;

use function is_array;
use function is_object;
use function reset;

/**
 * `ActiveRelationTrait` implements the common methods and properties for active record relational queries.
 *
 * @psalm-require-implements ActiveQueryInterface
 *
 * @psalm-import-type Via from ActiveQueryInterface
 * @psalm-import-type IndexBy from QueryInterface
 */
trait ActiveRelationTrait
{
    private bool $multiple = false;
    private ActiveRecordInterface|null $primaryModel = null;
    /** @psalm-var array<string, string> */
    private array $link = [];

    /**
     * @var string|null the name of the relation that is the inverse of this relation.
     *
     * For example, an order has a customer, which means the inverse of the "customer" relation is the "orders", and the
     * inverse of the "orders" relation is the "customer". If this property is set, the primary record(s) will be
     * referenced through the specified relation.
     *
     * For example, `$customer->orders[0]->customer` and `$customer` will be the same object, and accessing the customer
     * of an order will not trigger a new DB query.
     *
     * This property is only used in relational context.
     *
     * {@see inverseOf()}
     */
    private string|null $inverseOf = null;
    /**
     * @var ActiveQueryInterface|array|null The relation associated with the junction table.
     * @psalm-var Via|null
     */
    private array|ActiveQueryInterface|null $via = null;

    /**
     * Clones internal objects.
     */
    public function __clone()
    {
        /** Make a clone of "via" object so that the same query object can be reused multiple times. */
        if (is_object($this->via)) {
            $this->via = clone $this->via;
        } elseif (is_array($this->via)) {
            $this->via = [$this->via[0], clone $this->via[1], $this->via[2]];
        }
    }

    /**
     * Specifies the relation associated with the junction table.
     *
     * Use this method to specify a pivot record/table when declaring a relation in the {@see ActiveRecord} class:
     *
     * ```php
     * class Order extends ActiveRecord
     * {
     *    public function getOrderItems() {
     *        return $this->hasMany(OrderItem::class, ['order_id' => 'id']);
     *    }
     *
     *    public function getItems() {
     *        return $this->hasMany(Item::class, ['id' => 'item_id'])->via('orderItems');
     *    }
     * }
     * ```
     *
     * @param string $relationName the relation name. This refers to a relation declared in {@see primaryModel}.
     * @param callable|null $callable a PHP callback for customizing the relation associated with the junction table.
     * Its signature should be `function($query)`, where `$query` is the query to be customized.
     *
     * @return static the relation object itself.
     */
    public function via(string $relationName, callable|null $callable = null): static
    {
        if ($this->primaryModel === null) {
            throw new InvalidConfigException('Setting via is only supported for relational queries.');
        }

        $relation = $this->primaryModel->relationQuery($relationName);
        $callableUsed = $callable !== null;
        $this->via = [$relationName, $relation, $callableUsed];

        if ($callableUsed) {
            $callable($relation);
        }

        return $this;
    }

    public function inverseOf(string $relationName): static
    {
        $this->inverseOf = $relationName;
        return $this;
    }

    public function getInverseOf(): ?string
    {
        return $this->inverseOf;
    }

    /**
     * Returns query records depending on {@see $multiple} .
     *
     * This method is invoked when a relation of an ActiveRecord is being accessed in a lazy fashion.
     *
     * @throws Exception
     * @throws InvalidArgumentException
     * @throws InvalidConfigException
     * @throws ReflectionException
     * @throws Throwable If the relation is invalid.
     *
     * @return ActiveRecordInterface|array|null The related record(s).
     */
    public function relatedRecords(): ActiveRecordInterface|array|null
    {
        return $this->multiple ? $this->all() : $this->one();
    }

    /**
     * If applicable, populate the query's primary model into the related records' inverse relationship.
     *
     * @param ActiveRecordInterface[]|array[] $result the array of related records as generated by {@see populate()}
     *
     * @throws InvalidConfigException
     *
     * @psalm-param non-empty-list<ActiveRecordInterface|array> $result
     * @psalm-param-out non-empty-list<ActiveRecordInterface|array> $result
     */
    private function addInverseRelations(array &$result): void
    {
        if ($this->inverseOf === null) {
            return;
        }

        $relatedModel = reset($result);

        if ($relatedModel instanceof ActiveRecordInterface) {
            $inverseRelation = $relatedModel->relationQuery($this->inverseOf);
            $primaryModel = $inverseRelation->isMultiple() ? [$this->primaryModel] : $this->primaryModel;

            /** @var ActiveRecordInterface $relatedModel */
            foreach ($result as $relatedModel) {
                $relatedModel->populateRelation($this->inverseOf, $primaryModel);
            }
        } else {
            $inverseRelation = $this->getModel()->relationQuery($this->inverseOf);
            $primaryModel = $inverseRelation->isMultiple() ? [$this->primaryModel] : $this->primaryModel;

            /** @var array $relatedModel */
            foreach ($result as &$relatedModel) {
                $relatedModel[$this->inverseOf] = $primaryModel;
            }
        }
    }

    /**
     * @psalm-param non-empty-array<ActiveRecordInterface|array> $primaryModels
     * @psalm-param-out non-empty-array<ActiveRecordInterface|array> $primaryModels
     *
     * @return ActiveRecordInterface[]|array[]
     */
    public function populateRelation(string $name, array &$primaryModels): array
    {
        return RelationPopulator::populate($this, $name, $primaryModels);
    }

    public function isMultiple(): bool
    {
        return $this->multiple;
    }

    /**
     * @return ActiveRecordInterface|null the primary model of a relational query.
     *
     * This is used only in lazy loading with dynamic query options.
     */
    public function getPrimaryModel(): ActiveRecordInterface|null
    {
        return $this->primaryModel;
    }

    /**
     * @return string[]
     * @psalm-return array<string, string>
     */
    public function getLink(): array
    {
        return $this->link;
    }

    /**
     * @psalm-return Via|null
     */
    public function getVia(): array|ActiveQueryInterface|null
    {
        return $this->via;
    }

    public function multiple(bool $value): static
    {
        $this->multiple = $value;

        return $this;
    }

    public function primaryModel(ActiveRecordInterface|null $value): static
    {
        $this->primaryModel = $value;

        return $this;
    }

    /**
     * @psalm-param array<string, string> $value
     */
    public function link(array $value): static
    {
        $this->link = $value;
        return $this;
    }
}
